// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JosiahWitt/lambgo/internal/runcmd (interfaces: RunnerAPI)

// Package mock_runcmd is a generated GoMock package.
package mock_runcmd

import (
	reflect "reflect"

	runcmd "github.com/JosiahWitt/lambgo/internal/runcmd"
	gomock "github.com/golang/mock/gomock"
)

// MockRunnerAPI is a mock of RunnerAPI interface.
type MockRunnerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerAPIMockRecorder
}

// MockRunnerAPIMockRecorder is the mock recorder for MockRunnerAPI.
type MockRunnerAPIMockRecorder struct {
	mock *MockRunnerAPI
}

// NewMockRunnerAPI creates a new mock instance.
func NewMockRunnerAPI(ctrl *gomock.Controller) *MockRunnerAPI {
	mock := &MockRunnerAPI{ctrl: ctrl}
	mock.recorder = &MockRunnerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerAPI) EXPECT() *MockRunnerAPIMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockRunnerAPI) Exec(arg0 *runcmd.ExecParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockRunnerAPIMockRecorder) Exec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockRunnerAPI)(nil).Exec), arg0)
}

// NEW creates a MockRunnerAPI.
func (*MockRunnerAPI) NEW(ctrl *gomock.Controller) *MockRunnerAPI {
	return NewMockRunnerAPI(ctrl)
}
