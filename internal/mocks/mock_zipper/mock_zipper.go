// Code generated by `ensure mocks generate`. DO NOT EDIT.
// Source: github.com/JosiahWitt/lambgo/internal/zipper (interfaces: ZipAPI)

// Package mock_zipper is a generated GoMock package.
package mock_zipper

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockZipAPI is a mock of the ZipAPI interface in github.com/JosiahWitt/lambgo/internal/zipper.
type MockZipAPI struct {
	ctrl     *gomock.Controller
	recorder *MockZipAPIMockRecorder
}

// MockZipAPIMockRecorder is the mock recorder for MockZipAPI.
type MockZipAPIMockRecorder struct {
	mock *MockZipAPI
}

// NewMockZipAPI creates a new mock instance.
func NewMockZipAPI(ctrl *gomock.Controller) *MockZipAPI {
	mock := &MockZipAPI{ctrl: ctrl}
	mock.recorder = &MockZipAPIMockRecorder{mock}
	return mock
}

// NEW creates a MockZipAPI. This method is used internally by ensure.
func (*MockZipAPI) NEW(ctrl *gomock.Controller) *MockZipAPI {
	return NewMockZipAPI(ctrl)
}

// EXPECT returns a struct that allows setting up expectations.
func (m *MockZipAPI) EXPECT() *MockZipAPIMockRecorder {
	return m.recorder
}

// ZipFile mocks ZipFile on ZipAPI.
func (m *MockZipAPI) ZipFile(_path string, _zippedFileName string) error {
	m.ctrl.T.Helper()
	inputs := []interface{}{_path, _zippedFileName}
	ret := m.ctrl.Call(m, "ZipFile", inputs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ZipFile sets up expectations for calls to ZipFile.
// Calling this method multiple times allows expecting multiple calls to ZipFile with a variety of parameters.
//
// Inputs:
//
//  path string
//  zippedFileName string
//
// Outputs:
//
//  error
func (mr *MockZipAPIMockRecorder) ZipFile(_path interface{}, _zippedFileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	inputs := []interface{}{_path, _zippedFileName}
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZipFile", reflect.TypeOf((*MockZipAPI)(nil).ZipFile), inputs...)
}
